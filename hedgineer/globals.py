from datetime import datetime
from random import choice, randint

# Avoid circular import
parse_date = lambda x: datetime.strptime(x, "%m/%d/%y").date()

ATTRIBUTE_PRIORITY = {
    "security_id": 0,
    "effective_start_date": 1,
    "effective_end_date": 2,
    "asset_class": 3,
    "ticker": 4,
    "name": 5,
}

TEST_AUDIT_TRAIL: list[tuple] = [
    (1, "ticker", "LENZ", parse_date("03/22/24")),
    (2, "market_cap", 549000, parse_date("05/23/24")),
    (1, "gics_sector", "healthcare", parse_date("01/01/24")),
    (1, "ticker", "GRPH", parse_date("01/01/24")),
    (1, "name", "Lenz Therapeutics, Inc", parse_date("03/22/24")),
    (2, "ticker", "V", parse_date("01/01/23")),
    (1, "gics_industry", "biotechnology", parse_date("01/01/24")),
    (2, "gics_sector", "technology", parse_date("01/01/23")),
    (1, "asset_class", "equity", parse_date("01/01/24")),
    (1, "name", "Graphite bio", parse_date("01/01/24")),
    (2, "gics_sector", "financials", parse_date("03/17/23")),
    (1, "market_cap", 400, parse_date("05/23/24")),
]

TEST_AUDIT_TRAIL_2: list[tuple] = [
    (1, "ticker", "LENZ", parse_date("03/22/24")),
    (3, "ticker", "ACME", parse_date("01/01/24")),
    (2, "market_cap", 549000, parse_date("05/23/24")),
    (1, "gics_sector", "healthcare", parse_date("01/01/24")),
    (1, "ticker", "GRPH", parse_date("01/01/24")),
    (1, "name", "Lenz Therapeutics, Inc", parse_date("03/22/24")),
    (2, "ticker", "V", parse_date("01/01/23")),
    (2, "asset_class", "fixed_income", parse_date("01/01/23")),
    (2, "interest_rate", 199, parse_date("01/01/23")),
    (1, "gics_industry", "biotechnology", parse_date("01/01/24")),
    (2, "gics_sector", "technology", parse_date("01/01/23")),
    (1, "asset_class", "equity", parse_date("01/01/24")),
    (1, "name", "Graphite bio", parse_date("01/01/24")),
    (2, "gics_sector", "financials", parse_date("03/17/23")),
    (1, "market_cap", 400, parse_date("05/23/24")),
]

AUDIT_TRAIL: list[tuple] = [
    (1, "ticker", "LENZ", parse_date("03/22/24")),
    (3, "ticker", "ACME", parse_date("01/01/24")),
    (2, "market_cap", 549000, parse_date("05/23/24")),
    (1, "gics_sector", "healthcare", parse_date("01/01/24")),
    (1, "ticker", "GRPH", parse_date("01/01/24")),
    (1, "name", "Lenz Therapeutics, Inc", parse_date("03/22/24")),
    (2, "ticker", "V", parse_date("01/01/23")),
    (2, "asset_class", "fixed_income", parse_date("01/01/23")),
    (2, "interest_rate", 199, parse_date("01/01/23")),
    (1, "gics_industry", "biotechnology", parse_date("01/01/24")),
    (2, "gics_sector", "technology", parse_date("01/01/23")),
    (1, "asset_class", "equity", parse_date("01/01/24")),
    (1, "name", "Graphite bio", parse_date("01/01/24")),
    (2, "gics_sector", "financials", parse_date("03/17/23")),
    (1, "market_cap", 400, parse_date("05/23/24")),
]

AUDIT_TRAIL_UPDATE: list[tuple] = [
    (1, "market_cap", 100, parse_date("03/01/24")),
    (1, "gics_industry", "health sciences", parse_date("03/01/24")),
    (1, "market_cap", 90000, parse_date("05/26/24")),
    (2, "market_cap", 548000, parse_date("05/26/24")),
    (1, "new_key", 123, parse_date("05/26/24")),
    (2, "new_key", 456, parse_date("03/17/23")),
]

POSITIONS_TABLE = [
    (1, 100, parse_date("02/01/24")),
    (1, 105, parse_date("02/01/24")),
    (2, 150, parse_date("02/01/24")),
    (1, 120, parse_date("03/01/24")),
    (2, 140, parse_date("03/01/24")),
]

ASSET_CLASSES = [
    "equity",
    "fixed_income",
    "commodities",
    "real_estate",
    "cash",
    "derivatives",
    "private_equity",
    "hedge_funds",
    "infrastructure",
    "collectibles",
    "mutual_funds",
    "etfs",
    "currency",
    "precious_metals",
    "alternative_investments",
]


TICKERS = [
    "TVIN",
    "GWSL",
    "BSKY",
    "SRTK",
    "FPTH",
    "QLHP",
    "ECHR",
    "PPCP",
    "SUMT",
    "URBE",
    "NGVN",
    "GSFE",
    "FDYN",
    "EEGE",
    "PTIV",
    "VVNT",
    "HRZN",
    "CRAX",
    "PHNX",
    "INFT",
    "TPET",
    "BSTR",
    "OMWV",
    "SYDN",
    "EVGR",
    "VLVT",
    "RDTK",
    "PPKS",
    "APXG",
    "STLR",
    "EQNX",
    "DYPX",
    "TFRM",
    "ZNTV",
    "NXDN",
    "VTHD",
    "SMPK",
    "ELMS",
    "CTRN",
    "GLTN",
    "BLHZ",
    "VGRD",
    "PION",
    "BFTK",
    "PACT",
    "INTG",
    "UNTY",
    "INED",
    "PSPH",
]


COMPANY_NAMES = [
    "TechVision Innovations",
    "GreenWave Solutions",
    "BlueSky Enterprises",
    "Sunrise Technologies",
    "FuturePath Industries",
    "QuantumLeap Holdings",
    "EcoHarmony Solutions",
    "Peak Performance Corp",
    "Summit Technologies",
    "UrbanEagle Group",
    "NextGen Ventures",
    "GlobalSphere Enterprises",
    "Fusion Dynamics",
    "EpicEdge Solutions",
    "PrimeTime Innovations",
    "Vivid Ventures",
    "Horizon Technologies",
    "CoreAxis Industries",
    "Phoenix Global",
    "Infinity Solutions",
    "Triumph Enterprises",
    "BrightStar Holdings",
    "OmegaWave Industries",
    "Synergy Dynamics",
    "Evergreen Solutions",
    "Velocity Ventures",
    "RadiantTech Corp",
    "PowerPeak Solutions",
    "Apex Innovations",
    "Stellar Enterprises",
    "Equinox Technologies",
    "DynamicPulse Industries",
    "TerraFirma Solutions",
    "Zenith Ventures",
    "Nexus Dynamics",
    "Vector Holdings",
    "SummitPeak Enterprises",
    "Elemental Solutions",
    "Centurion Technologies",
    "Galactic Innovations",
    "BlueHorizon Corp",
    "Vanguard Solutions",
    "Pioneer Ventures",
    "BrightFuture Technologies",
    "ProActive Industries",
    "Integrity Solutions",
    "Unity Ventures",
    "InnovativeEdge Holdings",
    "PrimeSphere Enterprises",
]


GICS_SECTORS = [
    "Energy",
    "Materials",
    "Industrials",
    "Consumer Discretionary",
    "Consumer Staples",
    "Health Care",
    "Financials",
    "Information Technology",
    "Communication Services",
    "Utilities",
    "Real Estate",
]

GICS_INDUSTRIES = [
    "Energy",
    "Oil, Gas & Consumable Fuels",
    "Energy Equipment & Services",
    "Materials",
    "Chemicals",
    "Metals & Mining",
    "Construction Materials",
    "Industrials",
    "Aerospace & Defense",
    "Industrial Machinery",
    "Building Products",
    "Consumer Discretionary",
    "Automobiles",
    "Consumer Services",
    "Media",
    "Consumer Staples",
    "Food & Staples Retailing",
    "Beverages",
    "Household Products",
    "Health Care",
    "Pharmaceuticals",
    "Biotechnology",
    "Health Care Equipment & Supplies",
    "Financials",
    "Banks",
    "Insurance",
    "Real Estate",
    "Information Technology",
    "Software",
    "IT Services",
    "Technology Hardware & Equipment",
    "Communication Services",
    "Media & Entertainment",
    "Telecommunication Services",
    "Utilities",
    "Electric Utilities",
    "Water Utilities",
    "Real Estate",
    "Real Estate Investment Trusts (REITs)",
    "Real Estate Management & Development",
]

CREDIT_RATINGS = [
    "AAA",
    "AA+",
    "AA",
    "AA-",
    "A+",
    "A",
    "A-",
    "BBB+",
    "BBB",
    "BBB-",
    "BB+",
    "BB",
    "BB-",
    "B+",
    "B",
    "B-",
    "CCC+",
    "CCC",
    "CCC-",
    "CC",
    "C",
    "D",
]

MOCK_ATTRIBUTES = {
    "asset_class": lambda: choice(
        [
            "equity",
            "fixed_income",
            "commodity",
            "real_estate",
            "cash",
            "derivative",
            "private_equity",
            # "hedge_fund",
            # "infrastructure",
            # "collectible",
            # "mutual_fund",
            # "etf",
            # "currency",
            # "precious_metal",
            # "alternative_investment",
        ]
    ),
    "ticker": lambda: choice(TICKERS),
    "name": lambda: choice(COMPANY_NAMES),
    "market_cap": lambda: randint(0, 1000000),
    "gics_sector": lambda: choice(GICS_INDUSTRIES),
    # "gics_industry": lambda: choice(GICS_SECTORS),
    "credit_rating": lambda: choice(CREDIT_RATINGS),
}
